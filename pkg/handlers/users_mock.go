// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package handlers is a generated GoMock package.
package handlers

import (
	gomock "github.com/golang/mock/gomock"
	session "golang-stepik-2020q2/6/99_hw/redditclone/pkg/session"
	user "golang-stepik-2020q2/6/99_hw/redditclone/pkg/user"
	reflect "reflect"
)

// MockUsersRepoInterface is a mock of UsersRepoInterface interface
type MockUsersRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoInterfaceMockRecorder
}

// MockUsersRepoInterfaceMockRecorder is the mock recorder for MockUsersRepoInterface
type MockUsersRepoInterfaceMockRecorder struct {
	mock *MockUsersRepoInterface
}

// NewMockUsersRepoInterface creates a new mock instance
func NewMockUsersRepoInterface(ctrl *gomock.Controller) *MockUsersRepoInterface {
	mock := &MockUsersRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUsersRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersRepoInterface) EXPECT() *MockUsersRepoInterfaceMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockUsersRepoInterface) GetByID(arg0 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUsersRepoInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepoInterface)(nil).GetByID), arg0)
}

// GetByUserName mocks base method
func (m *MockUsersRepoInterface) GetByUserName(arg0 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserName", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserName indicates an expected call of GetByUserName
func (mr *MockUsersRepoInterfaceMockRecorder) GetByUserName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserName", reflect.TypeOf((*MockUsersRepoInterface)(nil).GetByUserName), arg0)
}

// Register mocks base method
func (m *MockUsersRepoInterface) Register(arg0 *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUsersRepoInterfaceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsersRepoInterface)(nil).Register), arg0)
}

// Authorize mocks base method
func (m *MockUsersRepoInterface) Authorize(arg0, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *MockUsersRepoInterfaceMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUsersRepoInterface)(nil).Authorize), arg0, arg1)
}

// MockSessionsManagerInterface is a mock of SessionsManagerInterface interface
type MockSessionsManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsManagerInterfaceMockRecorder
}

// MockSessionsManagerInterfaceMockRecorder is the mock recorder for MockSessionsManagerInterface
type MockSessionsManagerInterfaceMockRecorder struct {
	mock *MockSessionsManagerInterface
}

// NewMockSessionsManagerInterface creates a new mock instance
func NewMockSessionsManagerInterface(ctrl *gomock.Controller) *MockSessionsManagerInterface {
	mock := &MockSessionsManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSessionsManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionsManagerInterface) EXPECT() *MockSessionsManagerInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionsManagerInterface) Create(arg0 string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionsManagerInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionsManagerInterface)(nil).Create), arg0)
}
